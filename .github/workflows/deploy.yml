name: Deploy My Static Site to Walrus with Provenance

on:
  push:
    branches:
      - main

jobs:
  build-site:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      actions: read
    outputs:
      output_dir: ${{ steps.parse.outputs.output_dir }}
      base64_hashes: ${{ steps.generate-manifest.outputs.base64_hashes }}

    steps:
      - name: Create temporary directory
        id: tmpdir
        run: |
          echo "dir=tmp/provenance-scripts" >> "$GITHUB_OUTPUT"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout provenance scripts
        uses: actions/checkout@v4
        with:
          repository: zktx-io/walrus-sites-provenance
          path: ${{ steps.tmpdir.outputs.dir }}
          ref: v0.1.5

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Parse config
        id: parse
        run: |
          CONFIG_PATH="./site.config.json"
          OUTPUT_DIR=$(jq -r 'if has("path") then .path else error("Missing required field: path") end' "$CONFIG_PATH")
          NETWORK=$(jq -r 'if has("network") then .network else error("Missing required field: network") end' "$CONFIG_PATH")
          EPOCHS=$(jq -r 'if has("epochs") then .epochs else error("Missing required field: epochs") end' "$CONFIG_PATH")
          echo "output_dir=$OUTPUT_DIR" >> "$GITHUB_OUTPUT"
          echo "network=$NETWORK" >> "$GITHUB_OUTPUT"
          echo "epochs=$EPOCHS" >> "$GITHUB_OUTPUT"

      - name: Fail if output folder exists
        run: |
          if [ -d "${{ steps.parse.outputs.output_dir }}" ]; then
            echo "Output folder ${{ steps.parse.outputs.output_dir }} already exists. Please delete it before running this workflow."
            exit 1
          fi

      - name: Install dependencies
        run: npm install

      - name: Build site
        run: npm run build

      - name: Generate site manifest
        id: generate-manifest
        run: |
          node "${{ steps.tmpdir.outputs.dir }}/dist/manifest/index.js"
          HASHES=$(jq -r '[.resources[] | "\(.blob_hash)  \(.path)" ] | join("\n")' "${{ steps.parse.outputs.output_dir }}/.well-known/site_manifest.json" | sha256sum | base64 -w0)
          echo "base64_hashes=$HASHES" >> "$GITHUB_OUTPUT"
        env:
          NETWORK: ${{ steps.parse.outputs.network }}
          EPOCHS: ${{ steps.parse.outputs.epochs }}
          OUTPUT_DIR: ${{ steps.parse.outputs.output_dir }}

      - name: Upload site config
        uses: actions/upload-artifact@v4
        with:
          name: site.config.json
          path: site.config.json

      - name: Upload site manifest
        uses: actions/upload-artifact@v4
        with:
          name: site_manifest.json
          path: ${{ steps.parse.outputs.output_dir }}/.well-known/site_manifest.json

      - name: Upload output directory
        uses: actions/upload-artifact@v4
        with:
          name: site-output
          path: ${{ steps.parse.outputs.output_dir }}

  provenance:
    needs: build-site
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      base64-subjects: ${{ needs.build-site.outputs.base64_hashes }}
      upload-assets: false
      provenance-name: 'site-provenance.intoto.jsonl'
    permissions:
      id-token: write
      contents: write
      actions: read

  verification:
    needs: [build-site, provenance]
    runs-on: ubuntu-latest
    steps:
      - name: Download site manifest
        uses: actions/download-artifact@v4
        with:
          name: site_manifest.json
          path: .well-known

      - name: Download provenance file
        uses: actions/download-artifact@v4
        with:
          name: site-provenance.intoto.jsonl
          path: .well-known

      - name: Download site output files
        uses: actions/download-artifact@v4
        with:
          name: site-output
          path: ${{ needs.build-site.outputs.output_dir }}

      - name: Install slsa-verifier
        run: |
          curl -sSfL https://github.com/slsa-framework/slsa-verifier/releases/latest/download/slsa-verifier-linux-amd64 -o slsa-verifier
          chmod +x slsa-verifier
          sudo mv slsa-verifier /usr/local/bin/

      - name: Verify SLSA Provenance and Generate JSON Report
        run: |
          MANIFEST_PATH=".well-known/site_manifest.json"
          PROVENANCE_PATH=".well-known/site-provenance.intoto.jsonl"
          REPORT_PATH=".well-known/verify-report.json"

          echo "📄 MANIFEST_PATH: $MANIFEST_PATH"
          echo "📄 PROVENANCE_PATH: $PROVENANCE_PATH"
          echo "📄 REPORT_PATH: $REPORT_PATH"

          if [ ! -f "$MANIFEST_PATH" ]; then
            echo "❌ site_manifest.json not found at $MANIFEST_PATH"
            exit 1
          fi

          if [ ! -f "$PROVENANCE_PATH" ]; then
            echo "❌ site-provenance.intoto.jsonl not found at $PROVENANCE_PATH"
            exit 1
          fi

          echo "[" > "$REPORT_PATH"

          FILES=$(jq -r '.resources[] | .path' "$MANIFEST_PATH")
          FIRST=true

          for FILE in $FILES; do
            FILE_PATH="${{ needs.build-site.outputs.output_dir }}/${FILE#/}"
            if [ ! -f "$FILE_PATH" ]; then
              echo "❌ Missing file: $FILE"
              exit 1
            fi

            echo "🔍 Verifying $FILE_PATH"
            echo "🔍 Verifying ${{ github.repository }}"
            OUTPUT=$(slsa-verifier verify-artifact "$FILE_PATH" \
              --provenance-path "$PROVENANCE_PATH" \
              --source-uri github.com/${{ github.repository }} 2>&1)
            echo "::group::🧾 slsa-verifier output"
            echo "$OUTPUT"
            echo "::endgroup::"

            PASSED=$(echo "$OUTPUT" | grep -q "PASSED" && echo true || echo false)
            BUILDER=$(echo "$OUTPUT" | grep "builder" | sed -E 's/.*builder (.*) at.*/\1/')
            COMMIT=$(echo "$OUTPUT" | grep "commit" | sed -E 's/.*commit ([a-f0-9]{7,}).*/\1/')

            if [ "$FIRST" = false ]; then
              echo "," >> "$REPORT_PATH"
            else
              FIRST=false
            fi

            jq -n \
              --arg file "$FILE" \
              --argjson passed "$PASSED" \
              --arg builder "$BUILDER" \
              --arg commit "$COMMIT" \
              '{ file: $file, passed: $passed, builder: $builder, commit: $commit }' >> "$REPORT_PATH"
          done

          echo "]" >> "$REPORT_PATH"

      - name: Upload verification report
        uses: actions/upload-artifact@v4
        with:
          name: verify-report.json
          path: ${{ needs.build-site.outputs.output_dir }}/.well-known/verify-report.json
