name: Deploy My Static Site to Walrus with Provenance

on:
  push:
    branches:
      - main

jobs:
  build-site:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      actions: read
    outputs:
      output_dir: ${{ steps.parse.outputs.output_dir }}
      base64_hashes: ${{ steps.generate-resources-hashes.outputs.base64_hashes }}

    steps:
      - name: Create temporary directory
        id: tmpdir
        run: |
          echo "dir=tmp/provenance-scripts" >> "$GITHUB_OUTPUT"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout provenance scripts
        uses: actions/checkout@v4
        with:
          repository: zktx-io/walrus-sites-provenance
          path: ${{ steps.tmpdir.outputs.dir }}
          ref: v0.1.5

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Parse config
        id: parse
        run: |
          CONFIG_PATH="./site.config.json"
          OUTPUT_DIR=$(jq -r 'if has("path") then .path else error("Missing required field: path") end' "$CONFIG_PATH")
          NETWORK=$(jq -r 'if has("network") then .network else error("Missing required field: network") end' "$CONFIG_PATH")
          EPOCHS=$(jq -r 'if has("epochs") then .epochs else error("Missing required field: epochs") end' "$CONFIG_PATH")
          echo "output_dir=$OUTPUT_DIR" >> "$GITHUB_OUTPUT"
          echo "network=$NETWORK" >> "$GITHUB_OUTPUT"
          echo "epochs=$EPOCHS" >> "$GITHUB_OUTPUT"

      - name: Fail if output folder exists
        run: |
          if [ -d "${{ steps.parse.outputs.output_dir }}" ]; then
            echo "Output folder ${{ steps.parse.outputs.output_dir }} already exists. Please delete it before running this workflow."
            exit 1
          fi

      - name: Install dependencies
        run: npm install

      - name: Build site
        run: npm run build

      - name: Generate site resource hashes
        id: generate-resources-hashes
        run: |
          OUTPUT_DIR="${{ steps.parse.outputs.output_dir }}"
          HASHES=""

          while IFS= read -r -d '' file; do
            FILE_HASH=$(sha256sum "$file" | cut -d ' ' -f 1)
            REL_PATH="${file#${OUTPUT_DIR}/}"  # Remove 'build/' prefix
            HASHES+="${FILE_HASH}  ${REL_PATH}"$'\n'
          done < <(find "$OUTPUT_DIR" -type f -print0)

          echo "base64_hashes=$(echo -n "$HASHES" | base64 -w0)" >> "$GITHUB_OUTPUT"
        env:
          NETWORK: ${{ steps.parse.outputs.network }}
          EPOCHS: ${{ steps.parse.outputs.epochs }}
          OUTPUT_DIR: ${{ steps.parse.outputs.output_dir }}

      - name: Upload site config
        uses: actions/upload-artifact@v4
        with:
          name: site.config.json
          path: site.config.json

      - name: Upload output directory
        uses: actions/upload-artifact@v4
        with:
          name: site-output
          path: ${{ steps.parse.outputs.output_dir }}

  provenance:
    needs: build-site
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      base64-subjects: ${{ needs.build-site.outputs.base64_hashes }}
      upload-assets: false
      provenance-name: 'walrus-sites.intoto.jsonl'
    permissions:
      id-token: write
      contents: write
      actions: read

  verification:
    needs: [build-site, provenance]
    runs-on: ubuntu-latest
    steps:
      - name: Download provenance file
        uses: actions/download-artifact@v4
        with:
          name: walrus-sites.intoto.jsonl
          path: .artifact

      - name: Download site output files
        uses: actions/download-artifact@v4
        with:
          name: site-output
          path: ${{ needs.build-site.outputs.output_dir }}

      - name: Install slsa-verifier
        run: |
          curl -sSfL https://github.com/slsa-framework/slsa-verifier/releases/latest/download/slsa-verifier-linux-amd64 -o slsa-verifier
          chmod +x slsa-verifier
          sudo mv slsa-verifier /usr/local/bin/

      - name: Verify SLSA Provenance and Generate JSON Report
        run: |
          PROVENANCE_PATH=".artifact/walrus-sites.intoto.jsonl"
          REPORT_PATH=".artifact/verify-report.json"
          FILE_PATH="./build/static/js/main.059e4ff7.js.map"

          slsa-verifier verify-artifact "$FILE_PATH" \
            --provenance-path "$PROVENANCE_PATH" \
            --source-uri github.com/zktx-io/walrus-sites-ga-example

          echo "::group::üßæ slsa-verifier output"
          echo "$OUTPUT"
          echo "::endgroup::"

          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::‚ùå Verification failed for $FILE_PATH"
            exit 1
          fi

      - name: Upload verification report
        uses: actions/upload-artifact@v4
        with:
          name: verify-report.json
          path: verify-report.json
